//% color=#2b64c3 weight=100 icon="\uf108" block="ML Runner" advanced=false
namespace testrunner {
    const enum TestRunnerIds {
        TestRunnerInference = 71,
        TestRunnerTimer = 72,
    }

    /**
     * Run this code when the model detects the input label has been predicted.
     *
     * This automatically starts running the ML model in the background.
     * When the model predicts the indicated label, an event is raised to
     * trigger this handler.
     *
     * @param mlEvent The label event that triggers this code to run.
     * @param body The code to run when the model predicts the label.
     */
    //% blockId=testrunner_on_ml_event
    //% block="on ML event %value"
    export function onMlEvent(mlEvent: TestRunnerLabels, body: () => void): void {
        startRunning();
        control.onEvent(TestRunnerIds.TestRunnerInference, mlEvent, body)
    }

    /**
     * TS shim for C++ function init(), which initialize the ML model with
     * an address to a model blob.
     *
     * @param modelBlob The model blob to initialize the ML model with.
     */
    //% blockId=testrunner_init
    //% shim=testrunner::init
    function initRunner(modelBlob: Buffer): void {
        return;
    }

    /**
     * Configure the ML model, start capturing accelerometer data, and run
     * the model in the background.
     */
    //% blockId=testrunner_run_model_background
    //% block="run ML model in background"
    export function startRunning(): void {
        // The model blob should be re-generated by the MakeCode extension
        const modelBlob = getModelBlob() || hex``;
        initRunner(modelBlob);
    }
}
